@page "/page/productimage/{id}"
@layout AdminLayout
@inject IProduct _product
@inject ICategory _category
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject IToastService toastService
@attribute [Authorize]

<div class="container-fluid">
                        <h2 class="mt-30 page-title">Product Image</h2>
                        <ol class="breadcrumb mb-30">
                            <li class="breadcrumb-item"><a>Product Image</a></li>
                            <li class="breadcrumb-item active">Product Image</li>
                        </ol>
                        <div class="row justify-content-between">
							<div class="col-lg-12 col-md-12">
								<div class="card card-static-2 mt-30 mb-30">
									<div class="card-title-2">
										<h4>All Image</h4>
									</div>
									<div class="card-body-table">
										<div class="table-responsive">
											<div class="fetchdata">
                        <div class="col-lg-4">
                            <table>
                                <tr>
                                    <td>Image</td>
                                    <td>
                                        <div class="fea-img">
												@if(mapping.PictureName == null)
                                {
												<img src="images/featured-img.jpg" alt="">
                                }
								else
								{
                                    <img src="@mapping.PictureName" width="60" height="60">
								}
													<InputFile OnChange="OnFileChange" />
											</div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        Image Name:
                                    </td>
                                    <td>
                                        <input type="text" @bind="mapping.PicturePath" class="form-control" />
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                    </td>
                                    <td>
                                        <button type="button" class="btn fa-save" @onclick="() => Save()">Save</button>
                                    </td>
                                </tr>
                            </table>
                        </div>
                        <div class="col-lg-8">
                            <h2>Image List</h2>
                            <table>
                                <thead>
                                    <tr>
                                        <th>Image</th>
                                        <th>Image Name</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (listProduct == null)
                                    {

                                    }
                                    else
                                    {
                                        @foreach (var item in listProduct)
                                        {
                                            <tr>
                                                <td>
                                                    @if(item.PictureName == null)
                                {
												<img src="images/featured-img.jpg" alt="">
                                }
								else
								{
                                    <img src="@item.PictureName" width="60" height="60">
								}
                                                </td>
                                                <td>@item.PicturePath</td>
                                                <td>
                                                    <a class="btn btn-danger btn-sm" @onclick="() => Delete(item)">
                                                        Delete
                                                    </a>
                                                </td>
                                            </tr>
                                        }
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
										</div>
									</div>
								</div>
							</div>
                        </div>
                    </div>
@code {
	[Parameter]
    public string id { get; set; }
    Product master = new Product();
    ProductPictureMapping mapping = new ProductPictureMapping();
    IList<ProductPictureMapping> listProduct = new List<ProductPictureMapping>();
	protected async override void OnInitialized()
	{
		await LoadData();
    }
    private async Task LoadData()
    {
        master = await _product.GetbyId(Convert.ToInt32(id));
        listProduct = await _product.GetAllProductMapping(Convert.ToInt32(id));
        mapping.PicturePath = string.Empty;
        StateHasChanged();
    }
    private async Task Save()
    {
        if (master.ProductId == 0)
        {
            toastService.ShowInfo("Invalid.");
        }
        else
        {
            mapping.ProductId = master.ProductId;
            mapping.IsActive = true;
            mapping.CreatedOn = DateTime.Now;
            var result = await _product.SaveMapping(mapping);

            if (result.IsSuccessStatusCode)
            {
                toastService.ShowSuccess("Successfully Saved.");
                await LoadData();
            }
            else
            {
                toastService.ShowError("Invalid.");
            }
        }
    }
    async void Delete(ProductPictureMapping sizeMaster)
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure?");
        if (confirmed)
        {
            var result = await _product.DeleteMapping(sizeMaster);
            if (result.IsSuccessStatusCode)
            {
               toastService.ShowSuccess("Successfully Deleted.");
                await LoadData();
            }
            else
            {
                toastService.ShowError("Cannot be delete already in used.");
            }
        }
    }
    async Task OnFileChange(InputFileChangeEventArgs e)
    {
        var format = "image/png";
        var resizedImage = await e.File.RequestImageFileAsync(format, 300, 300);
        var buffer = new byte[resizedImage.Size];
        await resizedImage.OpenReadStream().ReadAsync(buffer);
        var imageData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
        mapping.PictureName = imageData;
    }
}
